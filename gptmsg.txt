–û—Ç–ª–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –Ø –≤—Å—ë –ø–æ–Ω—è–ª:

- **HTML**: —Å–æ–∑–¥–∞—ë—Ç –∫–∞—Ä–∫–∞—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–ª—å—Ü–µ–≤.
- **CSS**: –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç "–≥–∏—Ç–∞—Ä–Ω—ã–π –≥—Ä–∏—Ñ" –∏ –∫–Ω–æ–ø–∫–∏.
- **JavaScript**: —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç —Ç–æ—á–∫–∏, —Å–∫—Ä–∏–ø—Ç –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ –∞–∫–∫–æ—Ä–¥–æ–≤ (JSON).

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç —Ç–∞–∫–∞—è:**

```
/project-root
  ‚îú‚îÄ‚îÄ index.html
  ‚îú‚îÄ‚îÄ style.css
  ‚îú‚îÄ‚îÄ script.js
  ‚îî‚îÄ‚îÄ chords.json
```

---

**–í–æ—Ç –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–æ–≤:**

### `index.html`
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ì–∏—Ç–∞—Ä–Ω—ã–π –ü–æ–∏—Å–∫ –ê–∫–∫–æ—Ä–¥–æ–≤</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>–ü–æ–∏—Å–∫ –ê–∫–∫–æ—Ä–¥–æ–≤ –ø–æ –ê–ø–ø–ª–∏–∫–∞—Ç—É—Ä–µ</h1>
    <div class="fretboard" id="fretboard"></div>
    <button id="searchButton">–ù–∞–π—Ç–∏ –∞–∫–∫–æ—Ä–¥</button>
    <div id="result"></div>

    <script src="script.js"></script>
</body>
</html>
```

---

### `style.css`
```css
body {
    font-family: Arial, sans-serif;
    text-align: center;
    padding: 20px;
}

.fretboard {
    display: grid;
    grid-template-columns: repeat(5, 60px);
    grid-template-rows: repeat(6, 60px);
    justify-content: center;
    margin: 20px auto;
    gap: 5px;
}

.fretboard div {
    border: 1px solid #aaa;
    background-color: #f9f9f9;
    cursor: pointer;
    position: relative;
}

.fretboard div.active::after {
    content: "";
    width: 20px;
    height: 20px;
    background-color: #3b82f6;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 18px;
    background-color: #3b82f6;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
}

button:hover {
    background-color: #2563eb;
}

#result {
    margin-top: 20px;
    font-size: 24px;
    font-weight: bold;
}
```

---

### `script.js`
```javascript
let fretboard = document.getElementById('fretboard');
let selected = {}; // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {—Å—Ç—Ä–æ–∫–∞: –ª–∞–¥}

const STRINGS = 6;
const FRETS = 5;

// –°–æ–∑–¥–∞—ë–º –≥–∏—Ç–∞—Ä–Ω—É—é –¥–æ—Å–∫—É
for (let string = 0; string < STRINGS; string++) {
    for (let fret = 0; fret < FRETS; fret++) {
        const cell = document.createElement('div');
        cell.dataset.string = string;
        cell.dataset.fret = fret;
        cell.addEventListener('click', () => toggleFinger(string, fret, cell));
        fretboard.appendChild(cell);
    }
}

function toggleFinger(string, fret, cell) {
    let key = `${string}-${fret}`;
    if (selected[key]) {
        delete selected[key];
        cell.classList.remove('active');
    } else {
        // –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ—á–∫–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä—É–Ω–µ
        Object.keys(selected).forEach(k => {
            if (k.startsWith(`${string}-`)) {
                document.querySelector(`[data-string="${string}"][data-fret="${k.split('-')[1]}"]`).classList.remove('active');
                delete selected[k];
            }
        });
        selected[key] = true;
        cell.classList.add('active');
    }
}

document.getElementById('searchButton').addEventListener('click', findChord);

async function findChord() {
    const response = await fetch('chords.json');
    const chords = await response.json();
    const inputShape = getCurrentShape();
    
    let bestMatch = null;
    let bestScore = Infinity;

    chords.forEach(chord => {
        let score = compareShapes(inputShape, chord.shape);
        if (score < bestScore) {
            bestScore = score;
            bestMatch = chord;
        }
    });

    const resultDiv = document.getElementById('result');
    if (bestMatch) {
        resultDiv.textContent = `–ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–∫–∫–æ—Ä–¥: ${bestMatch.name}`;
    } else {
        resultDiv.textContent = '–ê–∫–∫–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
}

function getCurrentShape() {
    let shape = Array(6).fill(null);
    for (let key in selected) {
        let [string, fret] = key.split('-').map(Number);
        shape[string] = fret;
    }
    return shape;
}

function compareShapes(shape1, shape2) {
    let score = 0;
    for (let i = 0; i < 6; i++) {
        if (shape1[i] !== shape2[i]) {
            score += 1;
        }
    }
    return score;
}
```

---

### `chords.json`
```json
[
    {
        "name": "Am",
        "shape": [null, 0, 2, 2, 1, 0]
    },
    {
        "name": "G",
        "shape": [3, 2, 0, 0, 0, 3]
    },
    {
        "name": "D",
        "shape": [null, null, 0, 2, 3, 2]
    }
]
```

---

### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –ø–æ —è—á–µ–π–∫–∞–º –≥—Ä–∏—Ñ–∞ ‚Äî —Å—Ç–∞–≤–∏—Ç —Ç–æ—á–∫–∏ ("–ø–∞–ª—å—Ü—ã").
- –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É **"–ù–∞–π—Ç–∏ –∞–∫–∫–æ—Ä–¥"**.
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ç–∏–≤ –±–∞–∑—ã –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ `chords.json`.
- –õ–∏–±–æ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ª–∏–±–æ —Å–∞–º—ã–π –ø–æ—Ö–æ–∂–∏–π –∞–∫–∫–æ—Ä–¥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–ª–∏—á–∏–π.

---

**–•–æ—á–µ—à—å, —è –µ—â—ë –¥–æ–±–∞–≤–ª—é —É–ª—É—á—à–µ–Ω–∏—è? –ù–∞–ø—Ä–∏–º–µ—Ä:**
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∏—Ä–∏–Ω—ã –≥—Ä–∏—Ñ–∞ (5 –ª–∞–¥–æ–≤ / 12 –ª–∞–¥–æ–≤),
- –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ "—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" / "–ø–æ—Ö–æ–∂–µ–µ",
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞?

–°–∫–∞–∑–∞—Ç—å? üî•üé∏